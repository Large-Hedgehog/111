-- 05/10

SELECT last_name, first_name
FROM customer
WHERE last_name LIKE '_A_T%s';


-- KIRK.STCLAIR@sakilacustomer.org
-- 고객 중에 이메일값이 다섯번째에 . 이 있고 13번째가 @인 사람 


SELECT *
FROM customer
WHERE email LIKE '____._______@%';


-- 성이  q, y로 시작하는 사람들 알고 싶다.
SELECT *
FROM customer
WHERE last_name REGEXP '^[QY]';

-- 성이  l, y로 끝나는  사람들 알고 싶다.
SELECT *
FROM customer
WHERE last_name REGEXP '[LY]$';


SELECT *
FROM customer
WHERE email REGEXP '^ROSA';


SELECT rental_id, customer_id
FROM rental
WHERE return_date IS NULL;


-- 반납일이 '2005-05-01'~'2005-09-01'이 아닌 렌탈 정보 알고싶다. + 미반납
SELECT *
FROM rental
WHERE date(return_date) not BETWEEN '2005-05-01' AND '2005-08-31'
OR return_date IS null
;

-- 실습 4-1
SELECT *
FROM payment
where customer_id <> 5 AND (amount>8 OR DATE(payment_date) = '2005-08-23');

-- 실습 4-2


-- 실습 4-3

SELECT *
FROM payment
WHERE amount IN (1.98, 7.98, 9.98) ;


-- 실습 4-4
SELECT *
FROM customer
WHERE last_name LIKE '_A%W%'
;

-- 실습 4-4
SELECT *
FROM customer
WHERE last_name REGEXP '^[a-zA-Z]{1}+A+W'
;



--

INSERT INTO favorite_food
(
person_id, food
)
VALUES
(1, 'pizza'),
(1, 'cookies'),
(1, 'nachos');


--
SELECT * FROM person;

SELECT A.food, A.person_id, B.person_id, B.fname, B.lname
FROM favorite_food A
INNER JOIN person B
ON A.person_id = B.person_id;

-- inner join 양쪽에 모두 있는 값만 나온다
-- left join 없는 값은 null로 나온다 


SELECT *
FROM person A
LEFT JOIN favorite_food B
ON A.person_id = B.person_id;


-- 고객 id, 이름, 성, address, district 값이 나오는 쿼리문 완성
SELECT A.customer_id, A.first_name, A.last_name, B.address, B.district
FROM customer A
left JOIN address B
ON A.address_id = B.address_id
;

-- 고객 id, 이름, 성, address, district 값이 나오는 쿼리문 완성
-- using 구문 사용시
-- 특정 상황에서만 사용할 수 있는 간단한 표기법이므로 혼동을 피하려면 on하위절을 사용하는 편이 좋다 
SELECT A.customer_id, A.first_name, A.last_name, B.address, B.district
FROM customer A
inner JOIN address B
USING(address_id)
;

-- ANSI join 문법
SELECT A.customer_id, A.first_name, A.last_name, B.address, B.district
FROM customer A, address B
WHERE A.address_id = B.address_id;


-- 고객 id, 이름, 성, 도시명 나오는 쿼리문 완성
SELECT A.customer_id, A.first_name, A.last_name, C.city
FROM customer A
JOIN address B
ON A.address_id = B.address_id
JOIN city C
ON C.city_id = B.city_id
;


-- 'California'값만 알고 있다. 미국 주중에 California에 사는 소비자 정보가 궁금하다.

SELECT * 
from customer A
INNER JOIN address B
ON A.address_id = B.address_id
WHERE B.district = 'California'
;

SELECT * FROM customer
WHERE address_id IN(
	SELECT address_id FROM address
	WHERE district = 'California'
);

SELECT * FROM customer A
INNER JOIN(
	SELECT address_id FROM address
	WHERE district = 'California'
) B
ON A.address_id = B.address_id;


SELECT * from address
WHERE district = 'California';
	

WHERE B.district = 'California'
;


-- 배우 이름이 CATE MCQUEEN, CUBA BIRCH 출연한 영화 
SELECT DISTINCT c.*
FROM actor a
INNER JOIN film_actor b
ON a.actor_id = b.actor_id
INNER JOIN film c
ON b.film_id = c.film_id
WHERE a.actor_id IN (
	SELECT a.actor_id  FROM film
	WHERE ((a.first_name = 'CATE' AND a.last_name = 'MCQUEEN') 
	OR (a.first_name = 'CUBA' AND a.last_name = 'BIRCH'))
)
;


SELECT DISTINCT C.*
FROM actor A
INNER JOIN film_actor B
ON A.actor_id = B.actor_id
INNER JOIN film C
ON B.film_id = C.film_id
WHERE (A.first_name, A.last_name) IN (('CATE', 'MCQUEEN'), ('CUBA','BIRCH'))
ORDER BY film_id;


-- CATE MCQUEEN, CUBA BIRCH 같이 출연한 영화이름
SELECT *
FROM film F
INNER JOIN (
	SELECT B.film_id FROM actor A
	INNER JOIN film_actor B
	ON A.actor_id = B.actor_id
WHERE (A.first_name, A.last_name) IN (('CATE', 'MCQUEEN'), ('CUBA','BIRCH'))
GROUP BY B.film_id
HAVING COUNT(*) = 2
) S
ON S.film_id = F.film_id;


-- 실습 5-1
SELECT c.first_name, c.last_name, a.address, ct.city
FROM customer c
INNER JOIN address a
ON c.address_id = a.address_id
INNER JOIN city ct
ON a.city_id = ct.city_id
WHERE a.district = 'California';


-- 실습 5-2
-- JOHN이라는 이름의 배우가 출연한 영화 
SELECT C.*
FROM actor A
INNER JOIN film_actor B
ON A.actor_id = B.actor_id
INNER JOIN film C
ON B.film_id = C.film_id
WHERE first_name IN ('JOHN');


-- 실습 5-3
-- 같은 도시에 있는 모든 주소를 반환하는 쿼리 address 테이블을 셀프 조인해야 하며 각 행에는 두 개의 서로 다른 주소가 포함되어야 한다
SELECT a1.address addr1, a2.address addr2, a1.city_id, a2.city_id
FROM address a1
INNER JOIN address a2
ON a1.city_id = a2.city_id
WHERE a1.address_id <> a2.address_id
;

SELECT address FROM address
WHERE city_id IN(
	SELECT city_id FROM address
	GROUP BY city_id
	HAVING COUNT(*) > 1
);



-- 05/11


SELECT 1 as num, 'abc' as str
union
SELECT 9, 'xyzaa'
UNION all
SELECT 1 , 'abc';

-- 컬럼명은 가장 위의 것을 따른다


-- 고객의 이름, 성 / 배우의 이름, 성 같이 띄워주세요

SELECT first_name, last_name
FROM customer
UNION
SELECT first_name, last_name
from actor
ORDER BY first_name;


-- 배우, 고객 둘다 이름이(fnm) J혹은 D로 시작하는 사람 리스트

SELECT 'customer' AS typ, first_name, last_name
FROM customer
WHERE first_name REGEXP '^[JD]'
UNION 
SELECT 'actor', first_name, last_name
from actor
where first_name REGEXP '^[JD]';


-- 배우, 고객 둘다 이름이(fnm) J혹은 D로 시작하는 사람 리스트
-- 서브쿼리 

SELECT T.*
FROM
(
	SELECT 'customer' AS typ, first_name, last_name
	FROM customer
	UNION 
	SELECT 'actor', first_name, last_name
	FROM actor
) T
WHERE T.first_name REGEXP '^[JD]';

-- 배우, 고객 둘다 이니셜이 JD
SELECT 'customer' AS typ, first_name, last_name
FROM customer
WHERE first_name REGEXP '^J' AND last_name REGEXP '^D'
UNION 
SELECT 'actor', first_name, last_name
from actor
where first_name REGEXP '^J' AND last_name REGEXP '^D';


-- 서브쿼리로 

SELECT T.*
FROM
(
	SELECT 'customer' AS typ, first_name, last_name
	FROM customer
	UNION 
	SELECT 'actor', first_name, last_name
	FROM actor
) T
WHERE T.first_name REGEXP '^J' AND T.last_name REGEXP '^D';


-- 고객과 배우의 이름이 겹치는사람 
SELECT 'customer' AS typ, first_name, last_name
FROM customer
WHERE first_name REGEXP '^J' AND last_name REGEXP '^D'
union
SELECT 'actor', first_name, last_name
from actor
where first_name REGEXP '^J' AND last_name REGEXP '^D'
GROUP BY first_name, last_name
HAVING COUNT(*) > 1;


-- 고객과 배우의 이름이 겹치지 않는 사람 
SELECT T.*
FROM
(
	SELECT 'customer' AS typ, first_name, last_name
	FROM customer
	UNION 
	SELECT 'actor', first_name, last_name
	FROM actor
) T
WHERE T.first_name REGEXP '^J' AND T.last_name REGEXP '^D'
GROUP BY first_name, last_name
HAVING COUNT(1) = 1;


CREATE TABLE except_a(
	id INT UNSIGNED 
);
CREATE TABLE except_b(
	id INT UNSIGNED 
);

INSERT INTO except_a
(id)
VALUES
(10), (11), (12), (10), (10);

INSERT INTO except_b
(id)
VALUES
(10), (10);

-- 10, 11, 12 , 중복제거 
SELECT id FROM except_a
UNION
SELECT id FROM except_b;


-- 실습 6-2
SELECT 'customer' AS typ, first_name, last_name
FROM customer
WHERE last_name REGEXP '^L'
UNION 
SELECT 'actor', first_name, last_name
from actor
where last_name REGEXP '^L';

-- 실습 6-3\SELECT 'customer' AS typ, last_name
SELECT 'customer' AS typ, first_name, last_name
FROM customer
WHERE last_name REGEXP '^L'
UNION 
SELECT 'actor', first_name, last_name
from actor
where last_name REGEXP '^L'
ORDER BY last_name;


-- 챕터 7 데이터 생성, 조작과 변환


CREATE TABLE string_tbl
(
	CHAR_fld CHAR(30),
	VCHAR_fld VARCHAR(30),
	text_fld TEXT
);

INSERT INTO string_tbl
(char_fld, vchar_fld, text_fld)
VALUES
(
	'This is char data',
	'This is varchar data',
	'This is text data'
);

SELECT * FROM string_tbl;

UPDATE string_tbl
SET vchar_fld = 'This is a piece of extremely long varchar data';
UPDATE string_tbl
SET text_fld = 'This s''tring didn''t WORK, but it does now';
-- '',\'등으로 홑따옴표 쓸 수 있다.

SELECT @@SESSION.sql_mode;
SET sql_mode = 'strict';

SHOW WARNINGS;

-- 문자열 합치기 
SELECT lname, fname, CONCAT(lname, ' ', fname)
FROM person;

SELECT lname, LENGTH(lname)
FROM person;

SELECT lname, POSITION('ur' IN lname)
FROM person;

SELECT text_fld, POSITION('n' IN text_fld)
FROM string_tbl;

SELECT text_fld, POSITION('n' IN text_fld), LOCATE('n', text_fld, 12)
FROM string_tbl;

SELECT '안녕' = '안녕'
	, 'abc' = 'ABC'
	, 'abc' = 'cba'
	, STRCMP('abc', 'ABCC')
	, STRCMP('abc', 'ab');
	
	-- 같으면 1 
	
	
SELECT 
	NAME,
	NAME LIKE '%y'
	NAME REGEXP '^[C'
FROM category;

SELECT first_name or ' ' or last_name OR 1
FROM customer;


SELECT FIRST_name, REPLACE(first_name, 'BA', 'DA') FROM customer;

-- 이름에서 PH > TH 바꾸고, NI>NA로 바꾸기

SELECT customer_id, first_name, REPLACE(REPLACE(first_name, 'PH', 'TH'), 'NI', 'NA')
FROM customer
ORDER BY first_name;


SELECT 'goodbye world', INSERT('goodbye world', 9, 0, 'cruel');


--영화 제목 빈칸에 NICE 추가
SELECT title, INSERT(title, POSITION(' ' IN title), 0, ' NICE')
FROM film;


SELECT email, substring(email, 3),  SUBSTRING(email, 3, 6), SUBSTR(email, 3, 3)
FROM customer;


-- 사용자 이메일을 쪼개서 출력, @ 기준
SELECT email, SUBSTRING(email, 1, (POSITION('@' IN email)-1)), SUBSTRING(email, (POSITION('@' IN email)+1))
FROM customer;


SELECT (38*59) / (78 - (8*6));


SELECT MOD(9, 2);

SELECT TRUNCATE(1123.3456,3), ABS(-10), ABS(10);

SELECT NOW(), CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP();


-- 문자열을 날짜 형식으로 형변환

SELECT CAST('23/05/11 16:46:30' AS DATETIME), CONVERT('2023-05-11 16:46:30', DATETIME);

SELECT DATE_ADD(CURRENT_DATE(), INTERVAL 5 DAY)
, DATE_ADD(NOW(), INTERVAL '03:27:11' HOUR_SECOND);


-- 1953-09-02 > 1955-10-02 변경
SELECT * FROM employees
WHERE emp_no = 10001;

UPDATE employees
SET birth_date = DATE_ADD(birth_date, INTERVAL '2-1' YEAR_MONTH)
WHERE emp_no = 10001;


-- weekday 0월 화1 수2 목3 금4 토5 일6 로 날짜에 맞춰서 숫자가 반환 
-- lastday 그 달의 마지막 일 
SELECT CURDATE(), SYSDATE(), WEEKDAY(NOW()), LAST_DAY(NOW())
, DATE_SUB(NOW(), INTERVAL '2' YEAR)
, EXTRACT(day FROM NOW())
, DATEDIFF('2023-05-11', '2023-09-20');
