-- 05/10

SELECT last_name, first_name
FROM customer
WHERE last_name LIKE '_A_T%s';


-- KIRK.STCLAIR@sakilacustomer.org
-- 고객 중에 이메일값이 다섯번째에 . 이 있고 13번째가 @인 사람 


SELECT *
FROM customer
WHERE email LIKE '____._______@%';


-- 성이  q, y로 시작하는 사람들 알고 싶다.
SELECT *
FROM customer
WHERE last_name REGEXP '^[QY]';

-- 성이  l, y로 끝나는  사람들 알고 싶다.
SELECT *
FROM customer
WHERE last_name REGEXP '[LY]$';


SELECT rental_id, customer_id
FROM rental
WHERE return_date IS NULL;


-- 반납일이 '2005-05-01'~'2005-09-01'이 아닌 렌탈 정보 알고싶다. + 미반납
SELECT *
FROM rental
WHERE date(return_date) not BETWEEN '2005-05-01' AND '2005-08-31'
OR return_date IS null
;

-- 실습 4-1
SELECT *
FROM payment
where customer_id <> 5 AND (amount>8 OR DATE(payment_date) = '2005-08-23');

-- 실습 4-2


-- 실습 4-3

SELECT *
FROM payment
WHERE amount IN (1.98, 7.98, 9.98) ;


-- 실습 4-4
SELECT *
FROM customer
WHERE last_name LIKE '_A%W%'
;

-- 실습 4-4
SELECT *
FROM customer
WHERE last_name REGEXP '^[a-zA-Z]{1}+A+W'
;



--

INSERT INTO favorite_food
(
person_id, food
)
VALUES
(1, 'pizza'),
(1, 'cookies'),
(1, 'nachos');


--
SELECT * FROM person;

SELECT A.food, A.person_id, B.person_id, B.fname, B.lname
FROM favorite_food A
INNER JOIN person B
ON A.person_id = B.person_id;

-- inner join 양쪽에 모두 있는 값만 나온다
-- left join 없는 값은 null로 나온다 


SELECT *
FROM person A
LEFT JOIN favorite_food B
ON A.person_id = B.person_id;


-- 고객 id, 이름, 성, address, district 값이 나오는 쿼리문 완성
SELECT A.customer_id, A.first_name, A.last_name, B.address, B.district
FROM customer A
left JOIN address B
ON A.address_id = B.address_id
;

-- 고객 id, 이름, 성, address, district 값이 나오는 쿼리문 완성
-- using 구문 사용시
-- 특정 상황에서만 사용할 수 있는 간단한 표기법이므로 혼동을 피하려면 on하위절을 사용하는 편이 좋다 
SELECT A.customer_id, A.first_name, A.last_name, B.address, B.district
FROM customer A
inner JOIN address B
USING(address_id)
;

-- ANSI join 문법
SELECT A.customer_id, A.first_name, A.last_name, B.address, B.district
FROM customer A, address B
WHERE A.address_id = B.address_id;


-- 고객 id, 이름, 성, 도시명 나오는 쿼리문 완성
SELECT A.customer_id, A.first_name, A.last_name, C.city
FROM customer A
JOIN address B
ON A.address_id = B.address_id
JOIN city C
ON C.city_id = B.city_id
;


-- 'California'값만 알고 있다. 미국 주중에 California에 사는 소비자 정보가 궁금하다.

SELECT * 
from customer A
INNER JOIN address B
ON A.address_id = B.address_id
WHERE B.district = 'California'
;

SELECT * FROM customer
WHERE address_id IN(
	SELECT address_id FROM address
	WHERE district = 'California'
);

SELECT * FROM customer A
INNER JOIN(
	SELECT address_id FROM address
	WHERE district = 'California'
) B
ON A.address_id = B.address_id;


SELECT * from address
WHERE district = 'California';
	

WHERE B.district = 'California'
;


-- 배우 이름이 CATE MCQUEEN, CUBA BIRCH 출연한 영화 
SELECT DISTINCT c.*
FROM actor a
INNER JOIN film_actor b
ON a.actor_id = b.actor_id
INNER JOIN film c
ON b.film_id = c.film_id
WHERE a.actor_id IN (
	SELECT a.actor_id  FROM film
	WHERE ((a.first_name = 'CATE' AND a.last_name = 'MCQUEEN') 
	OR (a.first_name = 'CUBA' AND a.last_name = 'BIRCH'))
)
;


SELECT DISTINCT C.*
FROM actor A
INNER JOIN film_actor B
ON A.actor_id = B.actor_id
INNER JOIN film C
ON B.film_id = C.film_id
WHERE (A.first_name, A.last_name) IN (('CATE', 'MCQUEEN'), ('CUBA','BIRCH'))
ORDER BY film_id;


-- CATE MCQUEEN, CUBA BIRCH 같이 출연한 영화이름
SELECT *
FROM film F
INNER JOIN (
	SELECT B.film_id FROM actor A
	INNER JOIN film_actor B
	ON A.actor_id = B.actor_id
WHERE (A.first_name, A.last_name) IN (('CATE', 'MCQUEEN'), ('CUBA','BIRCH'))
GROUP BY B.film_id
HAVING COUNT(*) = 2
) S
ON S.film_id = F.film_id;


-- 실습 5-1
SELECT c.first_name, c.last_name, a.address, ct.city
FROM customer c
INNER JOIN address a
ON c.address_id = a.address_id
INNER JOIN city ct
ON a.city_id = ct.city_id
WHERE a.district = 'California';


-- 실습 5-2
-- JOHN이라는 이름의 배우가 출연한 영화 
SELECT C.*
FROM actor A
INNER JOIN film_actor B
ON A.actor_id = B.actor_id
INNER JOIN film C
ON B.film_id = C.film_id
WHERE first_name IN ('JOHN');


-- 실습 5-3
-- 같은 도시에 있는 모든 주소를 반환하는 쿼리 address 테이블을 셀프 조인해야 하며 각 행에는 두 개의 서로 다른 주소가 포함되어야 한다
SELECT a1.address addr1, a2.address addr2, a1.city_id, a2.city_id
FROM address a1
INNER JOIN address a2
ON a1.city_id = a2.city_id
WHERE a1.address_id <> a2.address_id
;

SELECT address FROM address
WHERE city_id IN(
	SELECT city_id FROM address
	GROUP BY city_id
	HAVING COUNT(*) > 1
);
